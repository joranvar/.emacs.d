* Introduction

This document contains the settings for use of emacs. It is heavily
modeled after the literate org settings file by [[https://github.com/mwfogleman/config][mwfogleman]].

* Interacting with the host operating system
Of course, emacs can not (yet) run as a [[http://c2.com/cgi/wiki?EmacsAsOperatingSystem][standalone operating
system]]. So for certain tasks, it needs to interact with the host (and
so do I).

** What is my home directory?

substitute-in-file-name seems not to work really well in my Windows
configuration at the moment, so I will have to resort to this for now.

#+BEGIN_SRC emacs-lisp
  (defvar joranvar/home
    (if (eq system-type 'gnu/linux)
        (substitute-in-file-name "$HOME")
      "C:/Users/bart.post"))
#+END_SRC

** Which sound player to use?
#+BEGIN_SRC emacs-lisp
  (defvar joranvar/audio-player
    (or (executable-find "aplay")
        (executable-find "afplay")
        nil)
  ;;      "c:/Program Files/MPC-HC/mpc-hc64.exe")
    "The executable that makes sound.")
#+END_SRC

** Where can I find gpg?
#+BEGIN_SRC emacs-lisp
  (defvar joranvar/gpg-location
    (or (executable-find "gpg")
        "c:/Program Files/GNU/GnuPG/pub/gpg.exe")
    "The executable that provides encryption.")
#+END_SRC

** Where can I find omnisharp?
#+BEGIN_SRC emacs-lisp
  (defvar joranvar/omnisharp-path
    (substitute-in-file-name
     (if (eq system-type 'gnu/linux)
         "$HOME/git_pull/omnisharp-server/OmniSharp/bin/Debug/OmniSharp.exe"
       "D:\\Ontwikkeling\\omnisharp-server\\OmniSharp\\bin\\Debug\\OmniSharp.exe"))
    "The executable that provides csharp checking.")
#+END_SRC

** Printing

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setenv "GS_LIB" "C:/Program Files/gs/gs9.15;C:/Program Files/gs/gs9.15/lib")
    (setq ps-lpr-command "C:/Program Files/gs/gs9.15/bin/gswin64c.exe")
    (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH" "-sDEVICE=mswinpr2"))
    (setq ps-printer-name t))
#+END_SRC

* General settings

** Personal information

#+begin_src emacs-lisp
  (setq user-full-name "Bart Post"
        user-mail-address "bart.post@gmail.com")
#+end_src

** Private information

Of course I won't put the private stuff in here. My private settings
are in an encrypted file.

In order to read it, epa must be enabled. However, I don't want it to
use any gpg-agent if I'm on a terminal for instance. The following
piece of advice should help switch to manual pin entry when I choose
so (thanks [[http://www.enigmacurry.com/2009/01/14/extending-emacs-with-advice/][enigma curry]]!).

#+BEGIN_SRC emacs-lisp
  (defadvice epg--start (around advice-epg-disable-agent disable)
    "Make epg--start not able to find a gpg-agent"
    (let ((agent (getenv "GPG_AGENT_INFO")))
      (setenv "GPG_AGENT_INFO" nil)
      ad-do-it
      (setenv "GPG_AGENT_INFO" agent)))

  (defun epg-disable-agent ()
    "Make EasyPG bypass any gpg-agent"
    (interactive)
    (ad-enable-advice 'epg--start 'around 'advice-epg-disable-agent)
    (ad-activate 'epg--start)
    (message "EasyPG gpg-agent bypassed"))

  (defun epg-enable-agent ()
    "Make EasyPG use a gpg-agent after having been disabled with epg-disable-agent"
    (interactive)
    (ad-disable-advice 'epg--start 'around 'advice-epg-disable-agent)
    (ad-activate 'epg--start)
    (message "EasyPG gpg-agent re-enabled"))
#+END_SRC

Default is to disable the gpg-agent when on a terminal.

#+BEGIN_SRC emacs-lisp
  (when (null (getenv "GNOME_KEYRING_PID"))
    (epg-disable-agent))
#+END_SRC

Also, I encrypt files to myself, always, so I need to set the key.

#+BEGIN_SRC emacs-lisp
  (setq epa-file-encrypt-to "bart.post@gmail.com")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "secrets.el.gpg" user-emacs-directory))
#+END_SRC

* Utils

** Set up local packages

#+BEGIN_SRC emacs-lisp
  (setq site-lisp-dir (expand-file-name "site-lisp" user-emacs-directory))
  (add-to-list 'load-path site-lisp-dir)
  (dolist (project (directory-files site-lisp-dir t "\\w+"))
    (when (file-directory-p project)
      (add-to-list 'load-path project)))
#+END_SRC

** Get the latest use-package and continue from there

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (setq load-prefer-newer t)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+END_SRC

** Paradox

Paradox package management is a bit more. Right now I'm trying it out.

#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t)

  (use-package paradox
    :ensure t
    :config
    (progn
      (setq paradox-execute-asynchronously t)
      (paradox-enable)))
#+END_SRC

** Dash and s and f

Functional programming in elisp!

#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t)
#+END_SRC

Extended string manipulation in elisp!

#+BEGIN_SRC emacs-lisp
  (use-package s
    :ensure t)
#+END_SRC

Extended file manipulation in elisp!

#+BEGIN_SRC emacs-lisp
  (use-package f
    :ensure t)
#+END_SRC

** My own tool functions

*** locate-nearest

This function helps find the file with the given regexp nearest to the
given file. Nearest is: in the same directory or higher.

#+BEGIN_SRC emacs-lisp
  (defun joranvar/locate-nearest (glob origin)
    "Find the first file matching GLOB nearest to the ORIGIN file."
    (let* ((origin (or (and (f-directory? origin) origin)
                       (f-dirname origin)))
           (found (f--traverse-upwards (f-glob glob it) origin)))
      (and found
           (f-relative (car (f-glob glob found)) origin))))
#+END_SRC

*** Add mode save hook

#+BEGIN_SRC emacs-lisp
  (defmacro joranvar/add-mode-local-write-contents-functions (mode-hook &rest body)
    "Add BODY to the write-contents-functions when MODE-HOOK is called.

  Similar to before-save-hook but buffer-local and more applicable."
    ()
    `(add-hook ,mode-hook
               (lambda()
                 (add-hook 'write-contents-functions
                           (lambda()
                             ,@body)))))
#+END_SRC

** Tramp configuration

The default prompt recognition setting is not enough for my situation.

#+BEGIN_SRC emacs-lisp
  (setq tramp-shell-prompt-pattern "\\(?:^\\|^M\\)[^]#$%>\n]*#?[]#$%>].* *\\(^[\\[[0-9;]*[a-zA-Z] *\\)*")
#+END_SRC

* Visual

Beauty is in the eye of the beholder. So let's make emacs
aesthetically pleasing.

** Get rid of the bars

I don't like to use the mouse, and I don't need the bars that take up
screen real estate. Make them go away.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

** Diminish some minor modes

#+BEGIN_QUOTE
"When we diminish a mode, we are saying we want it to continue doing
its work for us, but we no longer want to be reminded of it. It
becomes a night worker, like a janitor; it becomes an invisible man;
it remains a component, perhaps an important one, sometimes an
indispensable one, of the mechanism that maintains the day-people's
world, but its place in their thoughts is diminished, usually to
nothing. As we grow old we diminish more and more such thoughts, such
people, usually to nothing."
#+END_QUOTE

- Will Mengarini in [[http://www.eskimo.com/~seldon/diminish.el][diminish.el]]

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC

** Choose a theme

I used to have solarized, but I'm gonna try [[https://github.com/fniessen/emacs-leuven-theme][Leuven-theme]] for a
while. It works great with org-mode.

#+BEGIN_SRC emacs-lisp
  (load-theme 'leuven t)
#+END_SRC

I also want the whole line to be fontified (background color) in
org-mode headings.

#+BEGIN_SRC emacs-lisp
  (setq org-fontify-whole-heading-line t)
#+END_SRC

For dark mode, tango-2 seems best suited.

#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :ensure t
    :defer t)
#+END_SRC

** Toggle between light and dark
I want to be able to toggle between light and dark mode (when contrast is needed).

#+BEGIN_SRC emacs-lisp
  (defvar joranvar/dark-theme 'material
    "Theme for dark frame background mode")

  (defvar joranvar/light-theme 'leuven
    "Theme for light frame background mode")

  (defun joranvar/switch-frame-background-mode ()
    "Switch background mode from light to dark, and adjust the theme accordingly."
    (interactive)
    (-let (((old-theme new-mode new-theme) (if (eq frame-background-mode 'dark)
                                               '(joranvar/dark-theme light joranvar/light-theme)
                                             '(joranvar/light-theme dark joranvar/dark-theme))))
      (setq frame-background-mode new-mode)
      (disable-theme (symbol-value old-theme))
      (load-theme (symbol-value new-theme) t)))

  (global-set-key (kbd "C-c t") #'joranvar/switch-frame-background-mode)
#+END_SRC

** Font size

Set a smaller font size. More text on the screen is better.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height (if (eq system-type 'gnu/linux) 100 90))
#+END_SRC

** Fontify in org-mode

This goes a long way!

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Pretty symbols

Yummy looking code everywhere!

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

* Communication

Gnus should be a nice mail reader, so I'm gonna try and use it for my
work mails when at work.

** Gnus

#+BEGIN_SRC emacs-lisp
    (use-package gnus
      :ensure t
      :config
      (progn
#+END_SRC

*** Incoming mail at work

I used to poll through davmail directly, but now I'm trying the
offlineimap way, and have everything sent to my inbox locally.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods `(nnimap "server"
                                                       (nnimap-address ,joranvar/mailserver)
                                                       (nnimap-user ,joranvar/server-user)
                                                       (nnimap-stream network)
                                                       (nnimap-server-port 143)))

  (add-to-list 'gnus-secondary-select-methods `(nnimap "gmail"
                                                       (nnimap-address ,joranvar/mailserver)
                                                       (nnimap-user ,joranvar/gmail-user)
                                                       (nnimap-stream network)
                                                       (nnimap-server-port 143)))
#+END_SRC

*** Outgoing mail

#+BEGIN_SRC emacs-lisp
  (setq gnus-posting-styles `(("^nnimap\\+server:"
                               (address ,joranvar/work-mail)
                               ("X-Message-SMTP-Method" ,(concat "smtp 127.0.0.1 1025 " joranvar/work-mail))
                               (signature ,joranvar/work-signature))
                              ("^nnimap\\+gmail:"
                               (address joranvar/gmail-mail)
                               ("X-Message-SMTP-Method" ,(concat "smtp smtp.gmail.com 587 " joranvar/gmail-mail)))))
#+END_SRC

*** Formatting mail

The following converts org-mode style to a multipart/alternative mime
section.

#+BEGIN_SRC emacs-lisp
  (defun joranvar/htmlize-signature (signature)
    "Create html from a SIGNATURE."
    (s-join "<br />\n" (--map-indexed (cond ((s-contains? "@" it)
                                             (s-lex-format "<a style='font-size:9pt' href='mailto:${it}'>${it}</a>"))
                                            ((s-starts-with? "www." it)
                                             (s-lex-format "<a style='font-size:9pt' href='http://${it}'>${it}</a>"))
                                            ((s-starts-with? "S" it)
                                             (s-lex-format "<span style='font-size:9pt; color:#003366'><b>${it}</b></span>"))
                                            ((s-starts-with? "Before printing" it)
                                             (s-lex-format "<span style='font-size:9pt; color:#00B050'><b>${it}</b></span>"))
                                            ((s-starts-with? "DISCLAIMER: " it)
                                             (let ((disclaimer-text (s-chop-prefix "DISCLAIMER: " it)))
                                               (s-lex-format "<span style='font-size:8pt; color:#6F6F6E'><b>DISCLAIMER: </b>${disclaimer-text}</span>")))
                                            ((eq it-index 1)
                                             (s-lex-format "<span style='font-size:10pt; color:#003366'><b>${it}</b></span>"))
                                            ((eq it-index 2)
                                             (s-lex-format "<span style='font-size:9pt; color:gray'>${it}</span><span style='font-size:7pt'><br /></span>"))
                                            (t
                                             (s-lex-format "<span style='font-size:9pt; color:gray'>${it}</span>"))
                                            )
                                      (s-lines signature))))

  (defun joranvar/org-mime ()
    "Convert the body of this message from org-mode format to multipart/alternative html."
    (interactive)
    (save-excursion
      (let* ((body-point (progn (message-goto-body) (when (looking-at "^\<#secure") (forward-line)) (point)))
             (signature-point (progn (message-goto-signature) (point)))
             (body-text (buffer-substring-no-properties body-point signature-point))
             (signature-text (buffer-substring-no-properties signature-point (point-max))))
        (goto-char body-point)
        (set-mark signature-point)
        (org-html-convert-region-to-html)
        (insert (joranvar/htmlize-signature signature-text))
        (insert "\n<#/multipart>")
        (kill-region (point) (point-max))
        (goto-char body-point)
        (insert (concat "<#multipart type=alternative>\n" body-text "\n" signature-text "\n<#part type=text/html>\n")))))
#+END_SRC

*** Fetching mail

I use offlineimap, and do not want to have that autocycling, so I will
manually ask it to get the mail, please.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-get-new-news-hook
            (lambda ()
              (async-start
               `(lambda ()
                  (package-initialize)
                  (require 'dash)
                  (shell-command
                   (concat
                    (if (eq system-type 'windows-nt)
                        "plink -load Home "
                      ,(concat "ssh " joranvar/mailserver))
                    " 'offlineimap'") "*offline-imap*")
                  (with-current-buffer "*offline-imap*"
                    (goto-char (point-min))
                    (--map (cons (car it) (length (cdr it)))
                           (--group-by it
                                       (--unfold
                                        (when (re-search-forward "^ Copy.*-> Local-\\(.*\\)$" nil t)
                                          (cons (substring-no-properties (match-string 1)) nil))
                                        nil)))))
               (lambda (result)
                 (when result
                   (sauron-add-event
                    'gnus
                    3
                    (s-lex-format "${result}")
                    (lambda ()
                      (gnus-demon-scan-news)
                      (let ((f (make-frame)))
                        (select-frame f)
                        (pop-to-buffer-same-window "*Group*")))
                    nil))))))
#+END_SRC

*** Refresh mail

Do this every five minutes, idle or not (async anyway).

#+BEGIN_SRC emacs-lisp
  (gnus-demon-add-handler #'gnus-demon-scan-news 5 nil)
  (setq gnus-demon-timestep 60)
  (gnus-demon-init)
#+END_SRC

*** Gravatars

Show me your face!

#+BEGIN_SRC emacs-lisp
  (setq gnus-treat-from-gravatar 'head)
#+END_SRC

*** Display of the summary buffer

#+BEGIN_SRC emacs-lisp
  (setq gnus-summary-line-format "%U%R%z%I%(%[%4L: %-23,23f%]%) %o %s\n")
#+END_SRC

*** Sign mails by default

#+BEGIN_SRC emacs-lisp
    (add-hook 'gnus-message-setup-hook 'mml-secure-message-sign-pgpmime)
#+END_SRC

*** Verify and decrypt pgp/mime by default

#+BEGIN_SRC emacs-lisp
  (setq mm-decrypt-option 'always)
  (setq mm-verify-option 'always)

  (setq gnus-unbuttonized-mime-types nil)
#+END_SRC

*** End of gnus config

#+BEGIN_SRC emacs-lisp
  ))
#+END_SRC

*** Outgoing mail at work

#+BEGIN_SRC emacs-lisp
  (use-package smtpmail
    :ensure t
    :config
    (setq send-mail-function 'smtpmail-send-it
          smtpmail-default-smtp-server "127.0.0.1"
          smtpmail-stream-type 'network
          smtpmail-smtp-service 1025
          smtpmail-auth-credentials "~/.authinfo.gpg"))
#+END_SRC

*** bbdb

Manage contacts!

#+BEGIN_SRC emacs-lisp
    (use-package bbdb
      :ensure t
      :config
      (progn
        (bbdb-initialize 'gnus 'message)
        (bbdb-insinuate-message)
        (bbdb-insinuate-gnus)))
#+END_SRC

** Jabber

#+BEGIN_SRC emacs-lisp
  (use-package jabber
    :ensure t
    :config (setq jabber-account-list
                `((,joranvar/work-jabber-account
                   (:connection-type . starttls)))))
#+END_SRC

* Productivity

** Pomodoro

I like to work with the pomodoro technique. The ticking sound reminds
me that I need to keep my focus.

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :init (setq org-pomodoro-play-ticking-sounds (and joranvar/audio-player t)
                org-pomodoro-audio-player joranvar/audio-player))
#+END_SRC

** Kanban

This should visualise what I'm working on in any buffer. As I cannot
(yet) use the pomodoro tracker sounds above, I still like to have some
place to watch the stuff.

#+BEGIN_SRC emacs-lisp
  (use-package kanban
    :ensure t)
#+END_SRC

* Org mode

Keeping things organized, that's an aspiration I'd like to fulfill,
and org-mode might be the tool that'll save me.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :init (progn
            (defvar joranvar/org-directory (f-join joranvar/home "Documents/org")
              "The location of my org files.")
            (defvar joranvar/org-default (f-join joranvar/org-directory "default.org")
              "The location of my default org file."))
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    (progn
      (setq org-agenda-files
            (-distinct
             (-concat org-agenda-files
                      (f--files joranvar/org-directory
                                (and (f-ext? it "org")
                                     (not (s-ends-with? "~" (f-filename it))))
                                t)))
            org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)
            org-clock-into-drawer t
            org-log-into-drawer t
            org-startup-folded 'content
            org-clock-clocked-in-display 'both
            org-use-speed-commands t)
      (require 'org-capture)
      (--each '(("m" "Message" entry (file+headline joranvar/org-default "Incoming mail")
                 "* OPEN Reply to: %:from Subject: %:subject\n   SCHEDULED: %t\n   %U\n   %a" :clock-in t :clock-resume t :immediate-finish t)
                ("t" "todo" entry (file+headline joranvar/org-default "TASKS")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "Project-related journal" entry (file+headline "projects/aikido_redesign.org" "Clocking of Unplanned Items")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("i" "Interrupt" entry (file+datetree joranvar/org-default "JOURNAL")
                   "* %?\n%U\n" :clock-in t :clock-resume t))
        (add-to-list 'org-capture-templates it))
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)

      (joranvar/add-mode-local-write-contents-functions
       'org-mode-hook
       (save-excursion
         (org-update-all-dblocks)
         (org-table-recalculate-buffer-tables)))

      ;; Part where I use settings from http://doc.norang.ca/org-mode.html to refile everywhere
      (setq org-refile-targets '((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9)) ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
            org-refile-use-outline-path t  ; Use full outline paths for refile targets - we file directly with HELM
            org-outline-path-complete-in-steps nil ; Targets complete directly with HELM
            org-refile-allow-creating-parent-nodes 'confirm) ; Allow refile to create parent tasks with confirmation

      ;; Workaround for a compatibility issue with the newest emacs from github?
      (defun org-font-lock-ensure ()
        (font-lock-fontify-buffer))))
#+END_SRC

** Jira integration

I like to use emacs for Jira, too!

#+BEGIN_SRC emacs-lisp
  (require 'org-jira)
  (setq jiralib-url joranvar/jira-server
        org-jira-default-jql "sprint in openSprints() AND component = \"Team Platform\" order by priority desc, created asc")
#+END_SRC

But I also like to experiment with my new jiralib-rest implementation.

#+BEGIN_SRC emacs-lisp
  (use-package jiralib-rest
    :load-path "site-lisp/org-jira"
    :pin manual)
#+END_SRC

** gnorb

This combines gnus, org-mode and bbdb (v3) for tracking and
planning. Let's load it up!

#+BEGIN_SRC emacs-lisp
  (use-package gnorb
    :load-path "site-lisp/"
    :pin manual
    :config
    (progn
      (gnus-registry-initialize)
      (add-to-list 'gnus-secondary-select-methods '(nngnorb "gnorb"))
      (gnorb-tracking-initialize)))
  ;;     (eval-after-load "gnorb-bbdb"
  ;;       '(progn
  ;;          (define-key bbdb-mode-map (kbd "O") 'gnorb-bbdb-tag-agenda)
  ;;          (define-key bbdb-mode-map (kbd "S") 'gnorb-bbdb-mail-search)
  ;;          (define-key bbdb-mode-map [remap bbdb-mail] 'gnorb-bbdb-mail)
  ;;          (define-key bbdb-mode-map (kbd "l") 'gnorb-bbdb-open-link)
  ;;          (global-set-key (kbd "C-c C") 'gnorb-bbdb-cite-contact)))

  ;;     (eval-after-load "gnorb-org"
  ;;       '(progn
  ;;          (org-defkey org-mode-map (kbd "C-c C") 'gnorb-org-contact-link)
  ;;          (org-defkey org-mode-map (kbd "C-c t") 'gnorb-org-handle-mail)
  ;;          (org-defkey org-mode-map (kbd "C-c e") 'gnorb-org-view)
  ;;          (org-defkey org-mode-map (kbd "C-c E") 'gnorb-org-email-subtree)
  ;;          (org-defkey org-mode-map (kbd "C-c V") 'gnorb-org-popup-bbdb)
  ;;          (setq gnorb-org-agenda-popup-bbdb t)
  ;;          (eval-after-load "org-agenda"
  ;;            '(progn (org-defkey org-agenda-mode-map (kbd "H") 'gnorb-org-handle-mail)
  ;;                    (org-defkey org-agenda-mode-map (kbd "V") 'gnorb-org-popup-bbdb)))))

  ;;     (eval-after-load "gnorb-gnus"
  ;;       '(progn
  ;;          (define-key gnus-summary-mime-map "a" 'gnorb-gnus-article-org-attach)
  ;;          (define-key gnus-summary-mode-map (kbd "C-c t") 'gnorb-gnus-incoming-do-todo)
  ;;          (push '("attach to org heading" . gnorb-gnus-mime-org-attach)
  ;;                gnus-mime-action-alist)
  ;;          ;; The only way to add mime button command keys is by redefining
  ;;          ;; gnus-mime-button-map, possibly not ideal. Ideal would be a
  ;;          ;; setter function in gnus itself.
  ;;          (push '(gnorb-gnus-mime-org-attach "a" "Attach to Org heading")
  ;;                gnus-mime-button-commands)
  ;;          (setq gnus-mime-button-map
  ;;                (let ((map (make-sparse-keymap)))
  ;;                  (define-key map gnus-mouse-2 'gnus-article-push-button)
  ;;                  (define-key map gnus-down-mouse-3 'gnus-mime-button-menu)
  ;;                  (dolist (c gnus-mime-button-commands)
  ;;                    (define-key map (cadr c) (car c)))
  ;;                  map))))

  ;;     (eval-after-load "message"
  ;;       '(progn
  ;;          (define-key message-mode-map (kbd "C-c t") 'gnorb-gnus-outgoing-do-todo)))))
#+END_SRC

** Mobile

Sync stuff up with my phone!

#+BEGIN_SRC emacs-lisp
  (setq org-directory joranvar/org-directory
        org-mobile-directory joranvar/org-mobile-directory
        org-mobile-inbox-for-pull (f-join joranvar/org-directory "mobile-inbox.org"))
#+END_SRC

** Blogging

Jekyll!

#+BEGIN_SRC emacs-lisp
  (setq org-publish-project-alist
        `(("org-github"
           :base-directory ,(concat joranvar/github-blog-directory "_org")
           :base-extension "org"
           :publishing-directory ,joranvar/github-blog-directory
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 6
           :html-extension "html"
           :body-only t
           :section-numbers nil
           :table-of-contents nil)))
#+END_SRC

*** Legacy

I don't use org-page anymore.

#+BEGIN_SRC emacs-lisp
  ;; (use-package org-page
  ;;   :ensure t
  ;;   :config (setq op/repository-directory "~/git_pull/joranvar.github.io"
  ;;                 op/site-domain "http://joranvar.github.io"
  ;;                 op/site-main-title "Growing Software"
  ;;                 op/site-sub-title "for the love of it"
  ;;                 op/personal-github-link "http://github.com/joranvar"))
#+END_SRC
* Less typing

Several packages and settings will help me type less to accomplish the
same. The main theme is auto completion (read: helm).

** Helm

Make sure that we have helm, then bind some keys.

#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :ensure helm
    :init (helm-mode t)
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)))
#+END_SRC

** Writable grep

Having wgrep makes replace/edit on multiple lines quite nice! Use
helm-occur to find occurrances, C-x C-s to save to a helm-grep-mode
buffer, then C-c C-p to enter wgrep mode.

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t)
#+END_SRC

** The Platinum Searcher

helm-ag has a good name, but does not work on Windows (as far as I
read).  helm-pt should be faster anyways, and I would really like to
use it for my projects.  So here goes...

#+BEGIN_SRC emacs-lisp
  (use-package helm-pt
    :ensure t
    :bind ("C-c p s p" . helm-projectile-pt)
    :config (progn (when (eq system-type 'windows-nt)
                       (setq helm-pt-command "D:\\Apps\\emacs\\bin\\pt.exe"))))
#+END_SRC

** Projectile

When navigating to a file is as easy as choosing the project name from
a list, that *does* save a lot of typing.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :bind (("M-p" . helm-projectile)
           ("M-P" . projectile-persp-switch-project))
    :diminish projectile-mode
    :init
    (progn
      (use-package perspective
        :ensure t
        :config (progn (persp-mode)
                       (use-package persp-projectile
                         :ensure t)))
      (projectile-global-mode)
      (setq projectile-indexing-method 'alien
            projectile-completion-system 'helm
            projectile-enable-caching t
            projectile-enable-idle-timer t)
      (use-package org-projectile
        :ensure t
        :config
        (progn
          (global-set-key "\C-cnp" #'org-projectile:project-todo-completing-read)
          (org-projectile:per-repo)
          (setq org-projectile:per-repo-filename "README.org")
          (--each (org-projectile:todo-files)
            (add-to-list 'org-agenda-files it))
          (add-to-list 'org-capture-templates
                       (org-projectile:project-todo-entry "l" "* TODO %? %a\n" "Linked Project TODO"))))
      (use-package helm-projectile
        :ensure t
        :config
        (progn (helm-projectile-on)
               (setq projectile-switch-project-action (lambda () (magit-status (projectile-project-root))))))
      (setq magit-repo-dirs (mapcar (lambda (dir)
                                      (substring dir 0 -1))
                                    (-filter (lambda (project)
                                               (file-directory-p (concat project "/.git/")))
                                             (projectile-relevant-known-projects)))
            magit-repo-dirs-depth 1)))
#+END_SRC

** Focus-follow-mouse

This is something I really like in any window manager. As emacs does
consist windows (containing buffers), I really like to use it here,
too. Although ace-jump-window will complement this (see next item).

#+BEGIN_SRC emacs-lisp
  (setq mouse-autoselect-window t)
#+END_SRC

** Ace-jump-mode

This is a powerful "go where I'm looking at now" mode. Type "M-o", the
first char of the word you're looking at, and the letter that then
overlays it. BAM, you're there. Thanks to [[https://www.youtube.com/watch?feature=player_embedded&v=UZkpmegySnc#!][emacs rocks!]] for pointing
this out!

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind (("M-o" . ace-jump-mode)
           ("M-O" . ace-jump-mode-pop-mark))
    :config (ace-jump-mode-enable-mark-sync))
#+END_SRC

** Auto-fill-mode

This is a no-brainer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook #'auto-fill-mode)
#+END_SRC

** Auto-insert and yasnippet

Yasnippet is a template expansion tool.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t)
#+END_SRC

With yasnippet, I can also create files with some default content
initially. The following is based on something I found on
[[http://www.emacswiki.org/emacs/AutoInsertMode][emacswiki.org]]:

#+BEGIN_SRC emacs-lisp
  (use-package autoinsert
    :ensure t
    :config (progn
              (defun joranvar/autoinsert-yas-expand ()
                "Replace text in yasnippet template."
                (yas/expand-snippet (buffer-string) (point-min) (point-max)))
              (auto-insert-mode)
              (setq auto-insert t
                    auto-insert-directory (concat joranvar/home "/Documents/autoinsert/")
                    auto-insert-alist (--map (cons (s-concat "\\\." (file-name-extension it)) (vector it #'joranvar/autoinsert-yas-expand))
                                             (directory-files auto-insert-directory t "\\w+\.\\w+$" t)))))
#+END_SRC

** CompAny mode

Yup, preferred over auto-complete.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn
      (use-package helm-company
        :ensure t
        :config
        (progn
          (define-key company-mode-map (kbd "C-:") 'helm-company)
          (define-key company-active-map (kbd "C-:") 'helm-company)))
      (global-company-mode)))
#+END_SRC

** Smart parens

Smart parens are the way to go, apparently. Let's do this!

#+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :config
      (require 'smartparens-config)
      (smartparens-global-strict-mode)
      (sp-use-smartparens-bindings)
      (show-smartparens-global-mode))
#+END_SRC

* Version control

** Magit

Of course, the most beautiful git client of them all. Git-flow does
not (yet) work in the windows host, so we don't load it there.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("M-g" . magit-status)
    :config
    (progn
      (use-package magit-gitflow
        :if (eq system-type 'gnu/linux)
        :ensure t
        :config (add-hook 'magit-mode-hook #'turn-on-magit-gitflow))
      (use-package magit-filenotify
        :if (eq system-type 'gnu/linux)
        :ensure t
        :config (add-hook 'magit-status-mode-hook #'magit-filenotify-mode))
      (add-to-list 'magit-repo-dirs (expand-file-name "~/git_pull/"))
      (setq magit-status-buffer-switch-function 'switch-to-buffer)))
#+END_SRC

** Diff highlighting

The feedback when visiting a version controlled file is nice.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :config (add-hook 'find-file-hook (lambda () (diff-hl-mode t))))
#+END_SRC

** Git timemachine

:o Sounds great, let's try this out!

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t
    :bind ("M-G" . git-timemachine))
#+END_SRC

* Programming

** Languages
*** C#

C# development is what I do daily for a living. By day I use Visual
Studio, together with Resharper and NCrunch. Those are very good
tools, but I do miss the comfort of my own, personalized OS when I am
using them. But when I return to emacs, I miss the refactoring tools
and automatic testing and feedback that I have grown accustomed to.

Omnisharp and flycheck are two tools that may help me out here. I am
still hoping to find some bridge between flycheck and nunit/xunit,
though.

#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :config
    (progn
      (add-hook 'csharp-mode-hook #'omnisharp-mode)
      (setq omnisharp-server-executable-path joranvar/omnisharp-path)
      (define-key omnisharp-mode-map (kbd "M-.") #'omnisharp-auto-complete)
      (define-key omnisharp-mode-map (kbd "M-RET") #'omnisharp-run-code-action-refactoring)
      (define-key omnisharp-mode-map (kbd "<C-return>") #'omnisharp-fix-code-issue-at-point)))
#+END_SRC

**** Editing project files

For now, we just set the mode to xml.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.csproj\\'" . xml-mode))
  (add-to-list 'auto-mode-alist '("\\.fsproj\\'" . xml-mode))
#+END_SRC

**** Editing solution files

For now, we just include [[https://github.com/sensorflo/sln-mode][sensorflo]]s sln-mode.

#+BEGIN_SRC emacs-lisp
  (require 'sln-mode)
  (add-to-list 'auto-mode-alist '("\\.sln\\'" . sln-mode))
#+END_SRC

**** Indentation

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook (lambda() (c-set-offset 'arglist-open '+)))
#+END_SRC

**** Subword mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'subword-mode)
#+END_SRC

*** F#

F# is one of the functional languages that I'm really interested
in. Mostly because I feel I can use it at work also.

#+BEGIN_SRC emacs-lisp
  (use-package fsharp-mode
    :ensure t)
#+END_SRC

*** Emacs lisp

Most importantly: do not use tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** Haskell (xmonad)

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (progn
      (use-package shm
        :ensure t
        :config (add-hook 'haskell-mode-hook #'structured-haskell-mode))
      (add-hook 'haskell-mode-hook #'interactive-haskell-mode)))
#+END_SRC

*** Visual Basic (sad)

#+BEGIN_SRC emacs-lisp
  (use-package vbasense
    :ensure t
    :config
    (progn
      (load "visual-basic-mode.el")))
#+END_SRC

*** Powershell

#+BEGIN_SRC emacs-lisp
  ;;(use-package powershell
  ;;  :ensure t)
#+END_SRC

** Tools
*** Flycheck

As mentioned before, flycheck could really help me out by giving quick
feedback on the code that I'm typing (or reading).

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (progn
      (global-flycheck-mode)))
#+END_SRC

*** Symbol highlighting

This helps see various occurrances of the symbol at point easily in
the current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :config
    (progn
      (add-hook 'prog-mode-hook #'highlight-symbol-mode)))
#+END_SRC

*** Compilation

By default, I want the compilation buffer to scroll until the first
error is encountered (or to the bottom).

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC

* Hobbies

** Feeds

#+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :ensure t
      :bind ("C-c e" . elfeed)
      :config
      (setq elfeed-feeds
            (-concat
             joranvar/private-rss-feeds
             '("http://whattheemacsd.com/atom.xml"
               "http://oremacs.com/atom.xml"
               "http://emacs-fu.blogspot.com/feeds/posts/default"
               "http://batsov.com/atom.xml"
               "http://sachachua.com/blog/feed/"
               "http://emacsredux.com/atom.xml"
               "http://endlessparentheses.com/atom.xml"
               "http://www.lunaryorn.com/feed.atom"
               "http://mwfogleman.tumblr.com/rss"
               "http://www.reddit.com/r/emacs.rss"
               "http://www.reddit.com/r/fsharp.rss"
               "http://www.reddit.com/r/programmerhumor.rss"
               "http://feeds.hanselman.com/scotthanselman"
               "http://blog.cleancoder.com/atom.xml"))))
#+END_SRC
*** TODO Add xkcd

** Games

*** TODO Add steam

*** TODO Add LoL?

** Music

*** emms

#+BEGIN_SRC emacs-lisp
  (use-package emms
    :ensure t
    :config
    (progn
      (emms-standard) ;; or (emms-devel) if you want all features
      (setq emms-source-file-default-directory "~/music"
            emms-info-asynchronously t
            emms-show-format "  %s")
      (if (executable-find "mplayer")
          (setq emms-player-list '(emms-player-mpg321
                                   emms-player-ogg123
                                   emms-player-mplayer))
        (emms-default-players))))
#+END_SRC

* Web browsing

I use eww, now I have a nice recent build. The default search engine
out of the box is duckduckgo, but I still prefer google, as it always
brings me what I am looking for.

#+BEGIN_SRC emacs-lisp
  (setq eww-search-prefix "https://www.google.com/search?q=")
#+END_SRC

* Editing

Gee, there's also a section for configuring the text editing part of
the "text editor" ㋛

** [[http://endlessparentheses.com/hungry-delete-mode.html?source%253Drss][Hungry delete]]

Oh, how much I like this feature! Delete all whitespace in the
direction of the delete action.

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :init (global-hungry-delete-mode))
#+END_SRC

** Whitespace cleanup

Speaking of which, by default I want to cleanup whitespace in my
buffers.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook #'whitespace-cleanup)
#+END_SRC

** visual-regexp

See what's going to be replaced!

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :bind (("M-s r" . vr/replace)
           ("M-s %" . vr/query-replace)))
#+END_SRC

** Auto revert

Buffers reverting when something changed on disk (and when the buffer
has not yet been changed by me), sounds logical!

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode)
#+END_SRC

** Clipboard into kill-ring before kill

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

** Multiple cursors

I have heard about it. I'd like to use it.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC

* Startup

Finally, when I start up emacs, I want the following to be setup for
me.

** Create mail perspective with gnus

#+BEGIN_SRC emacs-lisp
  (save-excursion
    (persp-switch "mail")
    (gnus))
#+END_SRC

** Create main perspective with org agenda

#+BEGIN_SRC emacs-lisp
  (let ((org-agenda-window-setup 'current-window))
    (persp-switch "main")
    (org-agenda nil "n"))
#+END_SRC

** Do not show splash screen

I want to see the agenda, so skip the splash screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** Sauron

Keep an eye on everything.

#+BEGIN_SRC emacs-lisp
  (use-package sauron
    :ensure t
    :config (progn
              (setq sauron-sticky-frame t
                    sauron-hide-mode-line t)
              (if (eq system-type 'windows-nt)
                  (setq sauron-modules (--remove (eq it 'sauron-dbus) sauron-modules)))
              (sauron-start)))
#+END_SRC
