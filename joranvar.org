* Introduction

This document contains the settings for use of emacs. It is heavily
modeled after the literate org settings file by [[https://github.com/mwfogleman/config][mwfogleman]].

* Interacting with the host operating system
Of course, emacs can not (yet) run as a [[http://c2.com/cgi/wiki?EmacsAsOperatingSystem][standalone operating
system]]. So for certain tasks, it needs to interact with the host (and
so do I).

** Which sound player to use?
#+BEGIN_SRC emacs-lisp
  (defvar joranvar/audio-player
    (or (executable-find "aplay") 
        (executable-find "afplay")
        "c:/Program Files/MPC-HC/mpc-hc64.exe")
    "The executable that makes sound.")
#+END_SRC

** Where can I find gpg?
#+BEGIN_SRC emacs-lisp
  (defvar joranvar/gpg-location
    (or (executable-find "gpg")
        "c:/Program Files/GNU/GnuPG/pub/gpg.exe")
    "The executable that makes sound.")
#+END_SRC

* General settings

** Personal information

#+begin_src emacs-lisp
  (setq user-full-name "Bart Post"
        user-mail-address "bart.post@gmail.com")
#+end_src

** Private information

Of course I won't put the private stuff in here. My private settings
are in an encrypted file.

In order to read it, epa must be enabled. However, I don't want it to
use any gpg-agent if I'm on a terminal for instance. The following
piece of advice should help switch to manual pin entry when I choose
so (thanks [[http://www.enigmacurry.com/2009/01/14/extending-emacs-with-advice/][enigma curry]]!).

#+BEGIN_SRC emacs-lisp
  (defadvice epg--start (around advice-epg-disable-agent disable)
    "Make epg--start not able to find a gpg-agent"
    (let ((agent (getenv "GPG_AGENT_INFO")))
      (setenv "GPG_AGENT_INFO" nil)
      ad-do-it
      (setenv "GPG_AGENT_INFO" agent)))

  (defun epg-disable-agent ()
    "Make EasyPG bypass any gpg-agent"
    (interactive)
    (ad-enable-advice 'epg--start 'around 'advice-epg-disable-agent)
    (ad-activate 'epg--start)
    (message "EasyPG gpg-agent bypassed"))

  (defun epg-enable-agent ()
    "Make EasyPG use a gpg-agent after having been disabled with epg-disable-agent"
    (interactive)
    (ad-disable-advice 'epg--start 'around 'advice-epg-disable-agent)
    (ad-activate 'epg--start)
    (message "EasyPG gpg-agent re-enabled"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (load (expand-file-name "secrets.el.gpg" user-emacs-directory))
#+END_SRC

** Get the latest use-package and continue from there

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
  (setq load-prefer-newer t)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+END_SRC

** Paradox

Paradox package management is a bit more. Right now I'm trying it out.

#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t)

  (use-package paradox
    :ensure t
    :config
    (setq paradox-execute-asynchronously t))
#+END_SRC
* Visual
* Productivity

I like to work with the pomodoro technique. The ticking sound reminds
me that I need to keep my focus.

#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :init (setq org-pomodoro-play-ticking-sounds t
                org-pomodoro-audio-player joranvar/audio-player))
#+END_SRC
